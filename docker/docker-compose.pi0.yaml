---
services:
  traefik:
    image: traefik:${TRAEFIK_TAG}
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_PATH}/config/letsencrypt:/letsencrypt
      - ${PWD}/../config/traefik/dynamic.yaml:/etc/traefik/dynamic.yaml
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--entryPoints.metrics.address=:8083"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yaml"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=web-secure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web-secure.http.tls.certResolver=myresolver"
      - "--entrypoints.web-secure.http.tls.domains[0].main=${TRAEFIK_DOMAIN}"
      - "--entrypoints.web-secure.http.tls.domains[1].main=*.${TRAEFIK_DOMAIN}"
      # Lets-encrypt
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.disablepropagationcheck=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=duckdns"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=10"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
    
    environment:
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-ui.rule=Host(`${TRAEFIK_UI_HOST}`)"
      - "traefik.http.routers.traefik-ui.entrypoints=web-secure"
      - "traefik.http.services.traefik-ui.loadbalancer.server.port=8080"
    networks:
      - pi0_network

  adguardhome:
    image: adguard/adguardhome:${ADGUARD_TAG}
    container_name: adguardhome
    volumes:
      - ${DATA_PATH}/config/adguard_home/workdir:/opt/adguardhome/work
      - ${DATA_PATH}/config/adguard_home/confdir:/opt/adguardhome/conf
    ports:
      - 3000:3000/tcp
      - 53:53/tcp
      - 53:53/udp
      - 8082:8082/tcp
      - 8443:443/tcp
      - 443:443/udp
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adguard.rule=Host(`${ADGUARD_HOST}`)"
      - "traefik.http.routers.adguard.entrypoints=web-secure"
      - "traefik.http.services.adguard.loadbalancer.server.port=8082"
    networks:
      - pi0_network
  
  flaresolverr:
    image: nexter92/flaresolverr:${FLARESOLVERR_TAG}
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${FLARESOLVERR_LOG_LEVEL}
    ports:
      - 8191:8191
    restart: unless-stopped
    networks:
      - pi0_network
  
  portainer:
    image: portainer/portainer-ce:${PORTAINER_TAG}
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_PATH}/config/portainer:/data
    ports:
      - "9000:9000"
    networks:
      - pi0_network
  
  tailscale:
    privileged: true
    hostname: ${TAILSCALE_HOSTNAME}
    container_name: tailscale
    network_mode: "host"
    image: tailscale/tailscale:${TAILSCALE_TAG}
    volumes:
      - "${DATA_PATH}/config/tailscale:/var/lib"
      - "/dev/net/tun:/dev/net/tun"
    cap_add:
      - net_admin
      - sys_module
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TS_USERSPACE=true
      - TS_AUTH_KEY=${TS_AUTH_KEY}
      - TS_ROUTES=${TS_ROUTES}
    command:
      - "tailscaled"
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_TAG}
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /mnt/data:/mnt/data:ro
      - ${PWD}/../config/custom_metrics/:/custom_metrics
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.textfile.directory=/custom_metrics/'
      - '--collector.tcpstat'
    restart: unless-stopped
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      - pi0_network

  cadvisor:
    image: zcube/cadvisor:${CADVISOR_TAG}
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "${CADVISOR_PORT}:8080"
    command:
      - "--docker_only=true"
      - "--housekeeping_interval=30s"
      - "--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset,advtcp,memory_numa"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  sonarr:
    image: ghcr.io/linuxserver/sonarr:${SONARR_TAG}
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DATA_PATH}/config/sonarr:/config
      - ${DATA_PATH}/library:/library
    ports:
      - 8989:8989
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:8989
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`${SONARR_HOST}`)"
      - "traefik.http.routers.sonarr.entrypoints=web-secure"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
    networks:
      - pi0_network

  radarr:
    image: ghcr.io/linuxserver/radarr:${RADARR_TAG}
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DATA_PATH}/config/radarr:/config
      - ${DATA_PATH}/library:/library
    ports:
      - 7878:7878
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:7878
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`${RADARR_HOST}`)"
      - "traefik.http.routers.radarr.entrypoints=web-secure"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    networks:
      - pi0_network

  jackett:
    image: ghcr.io/linuxserver/jackett:${JACKETT_TAG}
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - AUTO_UPDATE=true
    volumes:
      - ${DATA_PATH}/config/jackett:/config
      - ${DATA_PATH}/library/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:9117
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`${JACKETT_HOST}`)"
      - "traefik.http.routers.jackett.entrypoints=web-secure"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
    networks:
      - pi0_network

  transmission:
    image: ghcr.io/linuxserver/transmission:${TRANSMISSION_TAG}
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DATA_PATH}/config/transmission:/config
      - ${DATA_PATH}/library/downloads:/library/downloads
      - ${DATA_PATH}/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    healthcheck:
      test: curl -f http://localhost:9091/transmission/web/
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`${TRANSMISSION_HOST}`)"
      - "traefik.http.routers.transmission.entrypoints=web-secure"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
    networks:
      - pi0_network

  bazarr:
    image: lscr.io/linuxserver/bazarr:${BAZARR_TAG}
    container_name: bazarr
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${DATA_PATH}/config/bazarr:/config
      - ${DATA_PATH}/library:/library/
    ports:
      - 6767:6767
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.rule=Host(`${BAZARR_HOST}`)"
      - "traefik.http.routers.bazarr.entrypoints=web-secure"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
    networks:
      - pi0_network

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:${JELLYFIN_TAG}
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_PUBLISHED_SERVER_URL}
    volumes:
      - ${DATA_PATH}/config/jellyfin:/config
      - ${DATA_PATH}/library/tv:/data/tvshows
      - ${DATA_PATH}/library/movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_HOST}`)"
      - "traefik.http.routers.jellyfin.entrypoints=web-secure"
      - "traefik.http.routers.jellyfin.service=jellyfin"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
    networks:
      - pi0_network

  jellyseerr:
    image: fallenbagel/jellyseerr:${JELLYSEERR_TAG}
    container_name: jellyseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    ports:
      - 5055:5055
    volumes:
      - ${DATA_PATH}/config/jellyseerr:/app/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyseerr.rule=Host(`${JELLYSEERR_HOST}`)"
      - "traefik.http.routers.jellyseerr.entrypoints=web-secure"
      - "traefik.http.services.jellyseerr.loadbalancer.server.port=5055"
    networks:
      - pi0_network

networks:
  pi0_network:
    driver: bridge
